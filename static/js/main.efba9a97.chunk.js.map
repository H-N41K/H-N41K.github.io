{"version":3,"sources":["utils/turnDraggable.js","text/textManager.js","text/contentEN.js","Components/Languages/Languages.js","Components/TopBar/buttonsFunction.js","Components/TopBar/TopBar.js","Components/Cursor/Cursor.js","Components/TextTyped/TextTyped.js","Components/SectionBar/SectionBar.js","utils/languages.js","Components/TerminalOutput/TerminalOutput.js","Components/Terminal/Terminal.js","index.js"],"names":["turnDraggable","Component","objectSentToDraggableLibrary","useEffect","Draggable","portfolioTextWithTwoLanguages","languages","defaultLanguage","getSectionContent","section","actualLanguage","getSectionName","changeLanguage","language","isValid","Error","supportedLanguages","includes","getSectionNames","contentInAEspecificLanguage","Object","keys","this","rel","target","href","isValidLanguage","convertLanguageInStringToElement","className","Languages","allLanguagesComponent","map","ButtonStates","getNextElement","list","index","length","addDisplayPropertyToElement","element","property","style","display","changeTextColor","color","colorObj","nextElement","nextIndex","nextTextColors","changeBackgroundColors","backgroundColor","nextBackgroundColors","Button","props","onClick","String","len","TopBar","id","document","querySelector","title","Cursor","setCursorStatus","is_on","setState","cursorOnStatus","opacity","changeCursorState","state","componentDidMount","interval","setInterval","timeToUpdate","componentWillUnmount","clearInterval","cursorChar","React","TextTyped","checkIfLeftCharToBeShowed","Boolean","charsToBeShowed","showOneChar","head","tail","newText","textInsideTerminalText","showACharIfIsMissingACharToBeShown","timeToWaitBetweenEachChar","totalTime","text","split","SectionBar","window","addEventListener","renderSection","renderedSection","sectionName","sections","setLanguageFromQueryParamOrBrowserLanguage","languageFromUrl","URLSearchParams","location","search","get","languageFromBrowser","navigator","TerminalOutput","setTimeout","changeSection","updateSectionNameAndClearContent","updateSectionContent","timeToWaitTheCommadIsTyped","sectionContent","updateSectionName","time","textTyped","promptString","ref","TerminalDraggable","ReactDOM","render","StrictMode","getElementById"],"mappings":"kVAceA,EAVO,SAACC,EAAWC,GAChC,OAAS,WAIP,OAHAC,qBAAW,kBACT,IAAIC,IAAUF,MAET,cAACD,EAAD,M,OCsCLI,EACJ,IAtCA,WAAYC,EAAWC,GAAkB,IAAD,gCAOxCC,kBAAoB,SAAAC,GAClB,OAAO,EAAKH,UAAU,EAAKI,gBAAgBD,GAApC,SAR+B,KAYxCE,eAAiB,SAAAF,GACf,OAAO,EAAKH,UAAU,EAAKI,gBAAgBD,GAApC,MAb+B,KAiBxCG,eAAiB,SAAAC,GACf,IAAI,EAAKC,QAAQD,GAGf,MAAM,IAAIE,MAAM,wBAA0BF,GAF1C,EAAKH,eAAiBG,GAnBc,KA0BxCC,QAAU,SAAAD,GAAQ,OAAI,EAAKG,mBAAmBC,SAASJ,IA1Bf,KA6BxCK,gBAAkB,WAChB,IAAIC,EAA8B,EAAKb,UAAU,EAAKI,gBAEtD,OADmBU,OAAOC,KAAKF,IA9B/BG,KAAKhB,UAAYA,EACjBgB,KAAKN,mBAAqBI,OAAOC,KAAKf,GACtCgB,KAAKZ,eAAiBH,EAmCxB,CA5CgB,CAChB,GCHc,CACd,QAAY,CACV,KAAS,WACT,QACJ,mCACA,sDACW,mBAAGgB,IAAI,aAAaC,OAAO,SAASC,KAAK,gCAAzC,8BADX,IACyG,uBADzG,yIAUE,OAAW,CACT,KAAS,SACT,QACJ,qCACA,8BACA,wDADA,iBAKA,8BACA,+DADA,4DAKA,8BACA,6EADA,0EAMA,8BACA,mDADA,gBAKA,8BACA,uDADA,kBAQE,QAAY,CACV,KAAS,aACT,QACJ,qCACA,sGACA,yDACA,+CAAO,mBAAGF,IAAI,aAAaC,OAAO,SAASC,KAAK,4BAAzC,0BAGP,+CAAO,mBAAGA,KAAK,gCAAR,2CAIL,OAAU,CACR,KAAS,YACT,QACA,mCACA,+CAAO,mBAAGF,IAAI,aAAaC,OAAO,SAASC,KAAK,qFAAzC,kDDhEa,MAgDlBjB,EAAoBH,EAA8BG,kBAGlDG,EAAiBN,EAA8BM,eAG/CO,EAAkBb,EAA8Ba,gBAGhDN,EAAiBP,EAA8BO,eAG/Cc,EAAkBrB,EAA8BS,QAGhDE,EAAqBX,EAA8BW,mBE9DnDW,G,MAAmC,SAAAd,GAAQ,OAC/C,mBACEe,UAAU,WAEVH,KAAM,aAAeZ,EAHvB,SAKGA,GAHIA,KAsBMgB,EAdG,WAChB,IAAIC,EACFd,EAAmBe,IAAIJ,GAIzB,OACE,qBAAKC,UAAU,YAAf,SACGE,K,gBCrBHE,EAAe,CACjB,QAAW,EACX,mBAAuB,EACvB,yBAA6B,EAC7B,WAAe,CAAC,OAAQ,MAAO,UAC/B,iBACE,CAAC,qBACA,qBACA,6BAKCC,EAAiB,SAACC,EAAMC,GAE5B,OAAIA,EAAQ,IADCD,EAAKE,OAEP,CAACF,EAAK,GAAI,GAEd,CAACA,EAAKC,EAAQ,GAAIA,EAAQ,IAsB7BE,EAA8B,SAACC,EAASC,GAAV,OAClCD,EAAQE,MAAMC,QAAUF,GAGpBG,EAAkB,SAAAJ,GAAO,OAC7BA,EAAQE,MAAMG,MAdO,SAAAC,GAAa,IAAD,EACFX,EAC7BW,EAAQ,WACRA,EAAQ,oBAHuB,mBAC5BC,EAD4B,KACfC,EADe,KAKjC,OADAF,EAAQ,mBAAyBE,EAC1BD,EASeE,CAAef,IAGjCgB,EAAyB,SAAAV,GAAO,OACpCA,EAAQE,MAAMS,gBA3Ba,SAAAL,GAAa,IAAD,EACRX,EAC7BW,EAAQ,iBACRA,EAAQ,0BAH6B,mBAClCC,EADkC,KACrBC,EADqB,KAKvC,OADAF,EAAQ,yBAA+BE,EAChCD,EAsByBK,CAAqBlB,IC1CvD,SAASmB,EAAOC,GAGd,OACE,qBACExB,UAAU,SACVyB,QAASD,EAAMC,QACfb,MAAO,CACL,MAAUY,EAAMT,MACd,gBAAoBS,EAAMT,MAC1B,MAAWW,OATT,IASuB,KACzB,OAAWA,OAVT,IAUuB,KACzB,WAAeA,OAVVC,GAU2B,QAuC3BC,MA/Bf,SAAgBJ,GAiBd,OACE,sBAAKK,GAAG,SAAR,UACE,sBAAK7B,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAACuB,EAAD,CAAQE,QAfY,kBDmBFf,EClBtBoB,SAASC,cAAc,iBDmBrB3B,EAAY,OACdK,EAA4BC,EAAS,UAErCD,EAA4BC,EAAS,aAEvCN,EAAY,QAAeA,EAAY,QANf,IAAAM,GCJkBK,MApB7B,SAqBP,cAACQ,EAAD,CAAQE,QAbe,kBAAMX,EACjCgB,SAASC,cAAc,wBAYoBhB,MApBhC,SAqBP,cAACQ,EAAD,CAAQE,QAXc,kBAAML,EAChCU,SAASC,cAAc,wBAUmBhB,MApB/B,YAsBT,oBAAGc,GAAG,QAAN,cAAiBL,EAAMQ,MAAvB,W,6BCKSC,G,wDAtDb,WAAaT,GAAQ,IAAD,8BAClB,cAAMA,IAURU,gBAAkB,SAACC,GACbA,EACF,EAAKC,SAAS,CACZC,gBAAiB,EACjBC,QAAU,MAGZ,EAAKF,SAAS,CACZC,gBAAiB,EACjBC,QAAU,KApBI,EA0BpBC,kBAAoB,WAClB,EAAKL,iBAAiB,EAAKM,MAAMH,iBA3Bf,EA+BpBI,kBAAoB,WAClB,EAAKC,SAAWC,aAAY,WAC1B,EAAKJ,sBACJ,EAAKC,MAAMI,eAlCI,EAsCpBC,qBAAuB,WACrBC,cAAc,EAAKJ,WArCnB,EAAKF,MAAS,CACZO,WAAa,SACbH,aAAiB,IACjBP,gBAAiB,EACjBC,QAAU,KANM,E,qDA4ClB,IAAIA,EAAUZ,OAAOhC,KAAK8C,MAAMF,SAAW,IAC3C,OACE,wBAAQT,GAAG,SAASjB,MAAO,CAAC,QAAY0B,GAAxC,SACG5C,KAAK8C,MAAMO,iB,GAhDCC,IAAM3E,YCwDZ4E,G,wDAtDb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IASR0B,0BAA4B,WAC1B,OAAOC,QAA+C,KAAvCzB,OAAO,EAAKc,MAAMY,mBAXhB,EAenBC,YAAc,WAAO,IAAD,cACI,EAAKb,MAAMY,iBAA5BE,EADa,KACJC,EADI,WAEdC,EAAU,EAAKhB,MAAMiB,uBAAyBH,EAClD,EAAKlB,SAAS,CACZqB,uBAAyBD,EACzBJ,gBAAkBG,KApBH,EAyBnBG,mCAAqC,WAC/B,EAAKR,4BACP,EAAKG,cAELP,cAAc,EAAKJ,WA7BJ,EAkCnBD,kBAAoB,WAClB,EAAKC,SAAWC,YACd,EAAKe,mCACL,EAAKlB,MAAMmB,4BAnCb,EAAKnB,MAAQ,CACXmB,0BAA4BnC,EAAMoC,UAAYpC,EAAMqC,KAAKrD,OACzDiD,uBAAyB,GACzBL,gBAAkB5B,EAAMqC,KAAKC,MAAM,KALpB,E,qDA2CjB,OACE,qBAAK9D,UAAU,YAAf,SACE,oBAAG6B,GAAG,YAAN,UACGnC,KAAK8C,MAAMiB,uBAAuB,cAAC,EAAD,a,GA/CrBT,IAAM3E,YC0Cf0F,G,wDAzCb,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IAORiB,kBAAoB,kBAClBuB,OAAOC,iBAAiB,OAAQ,EAAKC,gBATpB,EAYnBA,cAAgB,WACd,IAAIC,EACF,yCAAI7E,IAAkBa,KAAI,SAAAiE,GAAW,OACnC,mBACEpE,UAAU,eAEVyB,QAAS,kBAAM,EAAKD,MAAMC,QAAQ2C,IAClCvE,KAAM,IAAMuE,EAJd,SAMGrF,EAAeqF,IAJXA,SAUX,EAAKhC,SAAS,CAAC,SAAa+B,KAzB5B,EAAK3B,MAAQ,CACX,SAAa,8BAHE,E,qDAgCjB,OACE,mBAAGxC,UAAU,WAAb,SACGN,KAAK8C,MAAM6B,e,GAnCKrB,IAAM3E,YCYzBiG,EAA6C,WACjD,IAAIC,EAbkB,IAAIC,gBAAgBR,OAAOS,SAASC,QACnCC,IAFX,YAeRC,EARqBC,UAAU5F,SACD6E,MAAM,KAAK,GAUzChE,EAAgByE,GAClBvF,EAAeuF,GACNzE,EAAgB8E,IACzB5F,EAAe4F,ICwEJE,G,wDAtFb,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IAWRiB,kBAAoB,WAClB6B,IACAS,WAAW,EAAKC,cAAe,IAAM,EAAKxC,MAAM3D,UAd/B,EAkBnBmG,cAAgB,SAAAnG,GAEd,EAAKoG,iCAAiCpG,GACtCkG,WACE,EAAKG,qBACL,EAAK1C,MAAM2C,2BAJ0B,IAKrCtG,IAxBe,EA6BnBoG,iCAAmC,SAAApG,GACjC,EAAKuD,SAAS,CACZvD,QAAUA,EACVuG,eAAiB,KAEnB,EAAKC,kBAAkBxG,IAlCN,EAsCnBwG,kBAAoB,SAAAxG,GAClB,IAAIgF,EAAO,OAAShF,EAAU,OAC1ByG,EAAO,EAAK9C,MAAM2C,2BAA6BtB,EAAKrD,OAGxD,EAAK+E,UAAUnD,SAAS,CACtBuB,0BAA4B2B,EAC5B7B,uBAA4B,GAC5BL,gBAA4BS,EAAKC,MAAM,MAEzC,EAAKyB,UAAU9C,qBAhDE,EAoDnByC,qBAAuB,SAAArG,GACrB,EAAKuD,SAAS,CACZgD,eAAiBxG,EAAkBC,MApDrC,EAAK2D,MAAQ,CACX2C,2BAA6B,IAC7BtG,QAAiB,UACjB2G,aAAiB,oBACjBpB,YAAiB,GACjBgB,eAAiB,IAPF,E,qDA2DT,IAAD,OACP,OACE,qCACA,sBAAKpF,UAAU,YAAf,UACE,sBAAKA,UAAU,YAAf,UACE,mBAAG6B,GAAG,aAAN,SAAoBnC,KAAK8C,MAAMgD,eAC/B,cAAC,EAAD,CACEC,IAAK,SAAAA,GAAG,OAAI,EAAKF,UAAYE,GAC7B7B,UAAW,EAAGC,KAAM,QAGxB,sBAAKhC,GAAG,aAAR,UACE,uBACCnC,KAAK8C,MAAM4C,qBAKhB,mCACE,cAAC,EAAD,CAAY3D,QAAS/B,KAAKsF,yB,GA/ELhC,IAAM3E,YCkBpBqH,G,MAPWtH,GAfH,WAErB,OACE,sBAAKyD,GAAG,iBAAR,UACE,8BACE,cAAC,EAAD,CAAQG,MAJF,eAMR,qBAAKhC,UAAU,iBAAf,SACE,cAAC,EAAD,WAOgD,CACtD,SAAa,iBACb,2BAA+B,SAC/B,eAAkB,KCnBpB2F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/D,SAASgE,eAAe,W","file":"static/js/main.efba9a97.chunk.js","sourcesContent":["import {useEffect} from 'react'\r\nimport Draggable from 'draggable_dialog'\r\n\r\n\r\nconst turnDraggable = (Component, objectSentToDraggableLibrary) => {\r\n  return ( () => {\r\n    useEffect( () =>\r\n      new Draggable(objectSentToDraggableLibrary)\r\n    )\r\n    return <Component/>\r\n  })\r\n}\r\n\r\n\r\nexport default turnDraggable\r\n","import contentEN from './contentEN.js'\r\n\r\n\r\nconst defaultLanguage = \"en\"\r\nconst languages = {\r\n  \"en\" : contentEN\r\n}\r\n\r\n\r\nclass TextManager {\r\n  constructor(languages, defaultLanguage) {\r\n    this.languages = languages\r\n    this.supportedLanguages = Object.keys(languages)\r\n    this.actualLanguage = defaultLanguage\r\n  }\r\n\r\n\r\n  getSectionContent = section => {\r\n    return this.languages[this.actualLanguage][section][\"content\"]\r\n  }\r\n\r\n\r\n  getSectionName = section => {\r\n    return this.languages[this.actualLanguage][section][\"name\"]\r\n  }\r\n\r\n\r\n  changeLanguage = language => {\r\n    if (this.isValid(language)) {\r\n      this.actualLanguage = language\r\n    } else {\r\n      throw new Error(\"Unsuported language: \" + language )\r\n    }\r\n  }\r\n\r\n\r\n  isValid = language => this.supportedLanguages.includes(language)\r\n\r\n\r\n  getSectionNames = () => {\r\n    let contentInAEspecificLanguage = this.languages[this.actualLanguage]\r\n    let sectionNames = Object.keys(contentInAEspecificLanguage)\r\n    return sectionNames\r\n  }\r\n}\r\n\r\n\r\nconst portfolioTextWithTwoLanguages = \r\n  new TextManager(languages, defaultLanguage)\r\n\r\n\r\nconst getSectionContent = portfolioTextWithTwoLanguages.getSectionContent\r\n\r\n\r\nconst getSectionName = portfolioTextWithTwoLanguages.getSectionName\r\n\r\n\r\nconst getSectionNames = portfolioTextWithTwoLanguages.getSectionNames\r\n\r\n\r\nconst changeLanguage = portfolioTextWithTwoLanguages.changeLanguage\r\n\r\n\r\nconst isValidLanguage = portfolioTextWithTwoLanguages.isValid\r\n\r\n\r\nconst supportedLanguages = portfolioTextWithTwoLanguages.supportedLanguages\r\n\r\n\r\nexport {\r\n  getSectionName, \r\n  getSectionNames, \r\n  getSectionContent, \r\n  supportedLanguages,\r\n  changeLanguage, \r\n  isValidLanguage\r\n}\r\n\r\n\r\n","\r\n\r\nvar contentEN = {\r\n  \"aboutme\" : {\r\n    \"name\" : \"About me\",\r\n    \"content\" : \r\n<>\r\n<p>\r\nHi 👋, I'm <a rel=\"noreferrer\" target=\"_blank\" href=\"https://www.github.com/H-N41K\">Hemendra M. Naik</a>,<br/>\r\nI am a Computer Engineer. I am well-versed in technology and writing code to create systems that are reliable\r\nand user-friendly. \r\n</p>\r\n\r\n</>\r\n  },\r\n\r\n\r\n  \"skills\" : {\r\n    \"name\" : \"Skills\", \r\n    \"content\" : \r\n<>\r\n<p>\r\n<b>Programming Languages :</b>\r\n- C, Python\r\n</p>\r\n\r\n<p>\r\n<b>Web Development Technologies :</b>\r\n- PHP, Flask, MySQL, PostgreSQL, HTML, CSS, Javascript\r\n</p>\r\n\r\n<p>\r\n<b>Ethereum Frameworks &amp; related technologies :</b>\r\n- Vyper, Solidity, Truffle, Ganache, Web3, MetaMask, Remix IDE,\r\nIPFS\r\n</p>\r\n\r\n<p>\r\n<b>Automation Tools :</b>\r\n- Selenium\r\n</p>\r\n\r\n<p>\r\n<b>Video Encoding Tools :</b>\r\n- FFmpeg\r\n</p>\r\n</>\r\n  },\r\n\r\n\r\n  \"contact\" : {\r\n    \"name\" : \"Contact me\",\r\n    \"content\" : \r\n<>\r\n<p>Want to discuss a project or just want to say Hi ? Drop me a message.</p>\r\n<p>Here is my contact info:</p>\r\n<p> 💻 <a rel=\"noreferrer\" target=\"_blank\" href=\"https://github.com/H-N41K\">My Github</a></p>\r\n{/* <p> 👔 <a rel=\"noreferrer\" target=\"_blank\" href=\"https://www.linkedin.com/in//\">My Linkedin</a></p>\r\n<p> 📞 <a rel=\"noreferrer\" target=\"_blank\" href=\"https://t.me/\">My Telegram</a></p> */}\r\n<p> 📨 <a href=\"mailto:hemendranaik@gmail.com\">hemendranaik@gmail.com</a></p>\r\n</>\r\n  },\r\n\r\n  \"resume\": {\r\n    \"name\" : \"My Resume\",\r\n    \"content\":\r\n    <>\r\n    <p> 📜 <a rel=\"noreferrer\" target=\"_blank\" href=\"https://drive.google.com/file/d/1Lvq-mkxF5l4hicZn0ltoGZasLkyfsHmS/view?usp=sharing\">Click here to view my resume</a></p>\r\n    </>\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default contentEN\r\n","import {supportedLanguages} from '../../text/textManager.js'\r\nimport './Languages.css'\r\n\r\n\r\nconst convertLanguageInStringToElement = language => (\r\n  <a \r\n    className=\"language\"\r\n    key={language}\r\n    href={\"?language=\" + language}\r\n  >\r\n    {language}\r\n  </a>\r\n)\r\n\r\n\r\nconst Languages = () => {\r\n  let allLanguagesComponent = (\r\n    supportedLanguages.map(convertLanguageInStringToElement)\r\n  )\r\n\r\n\r\n  return (\r\n    <div className=\"languages\">\r\n      {allLanguagesComponent}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Languages\r\n","\r\n\r\nvar ButtonStates = {\r\n  \"isHide\" : true,\r\n  \"textColorsSelected\" : 0,\r\n  \"backgroundColorsSelected\" : 0,\r\n  \"textColors\" : [\"#0f0\", \"red\", \"yellow\"],\r\n  \"backgroundColors\" : \r\n    [\"rgba(0, 0, 0, 90%)\", \r\n     \"rgba(0, 0, 0, 60%)\", \r\n     \"rgba(255, 255, 255, 90%)\"\r\n    ]\r\n}\r\n\r\n\r\nconst getNextElement = (list, index) => {\r\n  let length = list.length\r\n  if (index + 1 === length) {\r\n      return [list[0], 0]\r\n  }\r\n  return [list[index + 1], index + 1]\r\n}\r\n\r\n\r\nconst nextBackgroundColors = colorObj => {\r\n  let [nextElement, nextIndex] = getNextElement(\r\n    colorObj[\"backgroundColors\"],\r\n    colorObj[\"backgroundColorsSelected\"])\r\n  colorObj[\"backgroundColorsSelected\"] = nextIndex\r\n  return nextElement\r\n}\r\n\r\n\r\nconst nextTextColors = colorObj => {\r\n  let [nextElement, nextIndex] = getNextElement(\r\n    colorObj[\"textColors\"],\r\n    colorObj[\"textColorsSelected\"])\r\n  colorObj[\"textColorsSelected\"] = nextIndex\r\n  return nextElement\r\n}\r\n\r\n\r\nconst addDisplayPropertyToElement = (element, property) =>\r\n  element.style.display = property\r\n\r\n\r\nconst changeTextColor = element => \r\n  element.style.color = nextTextColors(ButtonStates)\r\n\r\n\r\nconst changeBackgroundColors = element => \r\n  element.style.backgroundColor = nextBackgroundColors(ButtonStates)\r\n\r\n\r\nconst hideOrShowElement = element => {\r\n  if (ButtonStates[\"isHide\"]) {\r\n    addDisplayPropertyToElement(element, \"inline\")\r\n  } else {\r\n    addDisplayPropertyToElement(element, \"none\")\r\n  }\r\n  ButtonStates[\"isHide\"] = ! ButtonStates[\"isHide\"]\r\n}\r\n\r\n\r\nexport {hideOrShowElement, changeTextColor, changeBackgroundColors}\r\n","import Languages from '../Languages/Languages.js'\r\nimport './TopBar.css'\r\nimport {\r\n  hideOrShowElement, \r\n  changeTextColor,\r\n  changeBackgroundColors\r\n  } from './buttonsFunction.js'\r\n\r\n\r\nfunction Button(props) {\r\n  let len = 12\r\n  let margin = len / 2\r\n  return (\r\n    <div \r\n      className=\"button\"\r\n      onClick={props.onClick}\r\n      style={{ \r\n        \"color\" : props.color,\r\n          \"backgroundColor\" : props.color,\r\n          \"width\"  : String(len) + \"px\",\r\n          \"height\" : String(len) + \"px\",\r\n          \"marginLeft\" : String(margin) + \"px\"\r\n      }}\r\n    >\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nfunction TopBar(props) {\r\n  let red    = \"#f00\"\r\n  let yellow = \"#ff0\"\r\n  let green  = \"#0f0\"\r\n\r\n\r\n  const redButtonFunction = () => hideOrShowElement(\r\n    document.querySelector(\"div.languages\")\r\n  )\r\n  const yellowButtonFunction = () => changeTextColor(\r\n    document.querySelector(\"div#terminalDialog\")\r\n  )\r\n  const greenButtonFunction = () => changeBackgroundColors(\r\n    document.querySelector(\"div#terminalDialog\")\r\n  )\r\n\r\n\r\n  return (\r\n    <div id=\"topBar\" >\r\n      <div className=\"buttons\">\r\n        <Languages/>\r\n        <Button onClick={redButtonFunction} color={red}/>\r\n        <Button onClick={yellowButtonFunction} color={yellow}/>\r\n        <Button onClick={greenButtonFunction} color={green}/>\r\n      </div>\r\n      <p id=\"title\" > {props.title} </p>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default TopBar\r\n","import React from 'react'\r\nimport './Cursor.css'\r\n\r\n\r\nclass Cursor extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state  = {\r\n      cursorChar : '█',\r\n      timeToUpdate   : 500,\r\n      cursorOnStatus : true,\r\n      opacity : 100\r\n    }\r\n  }\r\n\r\n\r\n  setCursorStatus = (is_on) => {\r\n    if (is_on) {\r\n      this.setState({\r\n        cursorOnStatus : true,\r\n        opacity : 100\r\n      })\r\n    } else {\r\n      this.setState({\r\n        cursorOnStatus : false,\r\n        opacity : 0\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  changeCursorState = () => {\r\n    this.setCursorStatus(!this.state.cursorOnStatus)\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    this.interval = setInterval(() => {\r\n      this.changeCursorState() \r\n    }, this.state.timeToUpdate)\r\n  }\r\n\r\n\r\n  componentWillUnmount = () => {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n\r\n  render() {\r\n    let opacity = String(this.state.opacity) + \"%\"\r\n    return (\r\n      <strong id=\"cursor\" style={{\"opacity\" : opacity}}>\r\n        {this.state.cursorChar}\r\n      </strong>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Cursor\r\n","import React from 'react'\r\nimport Cursor from '../Cursor/Cursor.js';\r\nimport './TextTyped.css'\r\n\r\n\r\nclass TextTyped extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      timeToWaitBetweenEachChar : props.totalTime / props.text.length,\r\n      textInsideTerminalText : '',\r\n      charsToBeShowed : props.text.split('')\r\n    }\r\n  }\r\n\r\n\r\n  checkIfLeftCharToBeShowed = () => {\r\n    return Boolean(String(this.state.charsToBeShowed) !== \"\")\r\n  }\r\n\r\n\r\n  showOneChar = () => {\r\n    let [head, ...tail] = this.state.charsToBeShowed\r\n    let newText = this.state.textInsideTerminalText + head\r\n    this.setState({\r\n      textInsideTerminalText : newText,\r\n      charsToBeShowed : tail\r\n    })\r\n  }\r\n\r\n\r\n  showACharIfIsMissingACharToBeShown = () => {\r\n    if (this.checkIfLeftCharToBeShowed()) {\r\n      this.showOneChar()\r\n    } else {\r\n      clearInterval(this.interval)\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    this.interval = setInterval(\r\n      this.showACharIfIsMissingACharToBeShown, \r\n      this.state.timeToWaitBetweenEachChar\r\n    )\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"textTyped\">\r\n        <p id=\"textTyped\">\r\n          {this.state.textInsideTerminalText}<Cursor/>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default TextTyped\r\n","import React from 'react'\r\nimport {getSectionNames, getSectionName} from '../../text/textManager.js'\r\nimport './SectionBar.css'\r\n\r\n\r\nclass SectionBar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      \"sections\" : <></>\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount = () => \r\n    window.addEventListener(\"load\", this.renderSection)\r\n\r\n\r\n  renderSection = () => {\r\n    let renderedSection = (\r\n      <> {getSectionNames().map(sectionName => \r\n        <a\r\n          className=\"sectionLinks\"\r\n          key={sectionName}\r\n          onClick={() => this.props.onClick(sectionName)}\r\n          href={\"#\" + sectionName}\r\n        >\r\n          {getSectionName(sectionName)}\r\n        </a>\r\n      )}</>\r\n    )\r\n\r\n\r\n    this.setState({\"sections\" : renderedSection})\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <p className=\"sections\">\r\n        {this.state.sections}\r\n      </p> \r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default SectionBar\r\n","import {isValidLanguage, changeLanguage} from '../text/textManager.js'\r\n\r\n\r\nconst getLanguageFromUrlQueryParam = () => {\r\n  let query = \"language\"\r\n  let urlParamsObject = new URLSearchParams(window.location.search)\r\n  return urlParamsObject.get(query)\r\n}\r\n\r\n\r\nconst getBrowserLanguage = () => {\r\n  let languageAndCountry = navigator.language\r\n  let language = languageAndCountry.split(\"-\")[0]\r\n  return language\r\n}\r\n\r\n\r\nconst setLanguageFromQueryParamOrBrowserLanguage = () => {\r\n  let languageFromUrl = getLanguageFromUrlQueryParam()\r\n  let languageFromBrowser = getBrowserLanguage()\r\n\r\n\r\n  if (isValidLanguage(languageFromUrl)) {\r\n    changeLanguage(languageFromUrl)\r\n  } else if (isValidLanguage(languageFromBrowser)) {\r\n    changeLanguage(languageFromBrowser)\r\n  }\r\n}\r\n\r\n\r\nexport {setLanguageFromQueryParamOrBrowserLanguage}\r\n","import React from 'react'\r\nimport TextTyped from '../TextTyped/TextTyped.js'\r\nimport SectionBar from '../SectionBar/SectionBar.js'\r\nimport {getSectionContent} from '../../text/textManager.js'\r\nimport {\r\n  setLanguageFromQueryParamOrBrowserLanguage\r\n} from '../../utils/languages.js'\r\nimport './TerminalOutput.css'\r\n\r\n\r\nclass TerminalOutput extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      timeToWaitTheCommadIsTyped : 1000,\r\n      section        : \"aboutme\",\r\n      promptString   : \"[H-N41K@github]$ \",\r\n      sectionName    : \"\",\r\n      sectionContent : \"\",\r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount = () => {\r\n    setLanguageFromQueryParamOrBrowserLanguage()\r\n    setTimeout(this.changeSection, 1000, this.state.section)\r\n  }\r\n\r\n\r\n  changeSection = section => {\r\n    let timeToWaitAfterTheCommandIsTyped = 100\r\n    this.updateSectionNameAndClearContent(section)\r\n    setTimeout(\r\n      this.updateSectionContent, \r\n      this.state.timeToWaitTheCommadIsTyped + timeToWaitAfterTheCommandIsTyped,\r\n      section,\r\n    ) \r\n  }\r\n\r\n\r\n  updateSectionNameAndClearContent = section => {\r\n    this.setState({\r\n      section : section,\r\n      sectionContent : \"\"\r\n    })\r\n    this.updateSectionName(section)\r\n  }\r\n\r\n\r\n  updateSectionName = section => {\r\n    let text = \"cat \" + section + \".txt\"\r\n    let time = this.state.timeToWaitTheCommadIsTyped / text.length\r\n\r\n\r\n    this.textTyped.setState({\r\n      timeToWaitBetweenEachChar : time,\r\n      textInsideTerminalText    : '',\r\n      charsToBeShowed           : text.split(\"\")\r\n    })\r\n    this.textTyped.componentDidMount()\r\n  }\r\n\r\n\r\n  updateSectionContent = section => {\r\n    this.setState({\r\n      sectionContent : getSectionContent(section)\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <div className=\"outputDiv\">\r\n        <div className=\"promptDiv\">\r\n          <p id=\"promptText\">{this.state.promptString}</p>\r\n          <TextTyped \r\n            ref={ref => this.textTyped = ref} \r\n            totalTime={0} text={\"\"} \r\n          />\r\n        </div>\r\n        <div id=\"outputText\">\r\n          <br/>\r\n          {this.state.sectionContent}\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <>\r\n        <SectionBar onClick={this.changeSection}/>\r\n      </>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default TerminalOutput;\r\n","import turnDraggable from '../../utils/turnDraggable.js'\r\nimport TopBar from '../TopBar/TopBar.js'\r\nimport TerminalOutput from '../TerminalOutput/TerminalOutput.js'\r\nimport './Terminal.css'\r\n\r\n\r\nconst TerminalWindow = () => {\r\n  let title = \"Terminal\"\r\n  return (\r\n    <div id=\"terminalDialog\">\r\n      <div>\r\n        <TopBar title={title}/>\r\n      </div>\r\n      <div className=\"terminalScreen\">\r\n        <TerminalOutput/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst TerminalDraggable = turnDraggable(TerminalWindow, {\r\n  \"dialogId\" : \"terminalDialog\",\r\n  \"elementThatCaptureTheClick\" : \"topBar\",\r\n  \"centerElement\" : true\r\n})\r\n\r\n\r\nexport default TerminalDraggable\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport TerminalWindow from './Components/Terminal/Terminal.js'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TerminalWindow/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n\r\n"],"sourceRoot":""}